#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QPixmap>
#include <deque>

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    ui->functionPicker->addItem("Color Classification");
    ui->functionPicker->addItem("Mixing Quantification");
    ui->functionPicker->addItem("Sedimentation Quantification");
    ui->functionPicker->addItem("Flow Tracking Function");

    QPixmap temporaryImage("/home/armandt/Documents/ProjectGUI/testQt/Images/neptune.jpg");
    ui->imageLabel->setBackgroundRole(QPalette::Base);
    ui->imageLabel->setSizePolicy(QSizePolicy::Ignored, QSizePolicy::Ignored);
    ui->imageLabel->setScaledContents(true);
    ui->imageLabel->setPixmap(temporaryImage);
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::printOutput(QString s) {
    ui->outputTextEdit->append(s);
}

void MainWindow::parseRPMs(QString s) {
    bool done = false;

    if (s.contains('\n')) {
        done = false;
    } else {
        done = true;
    }

    QString r;
    int i;
    while (!done) {
        r = s.mid(0, s.indexOf('\n'));          //copy the text up to the newline
        i = r.toInt();
        if (i < 500) {
            i = 500;
        }
        if (i > 4500) {
            i = 4500;
        }
        rpmArray.push_back(i);                          //add onto the list of RPMs
        s = s.mid(s.indexOf('\n') + 1);                 //make s equal to the rest of the string after the \n
//        cout << r.toStdString() << '\n';

        if (s.contains('\n')) {         //update state of doneness
            done = false;
        } else {
            done = true;
        }
    }
    i = s.toInt();
    if (i < 500) {
        i = 500;
    }
    if (i > 4500) {
        i = 4500;
    }

    rpmArray.push_back(i);
}

void MainWindow::parseDurations(QString s) {
    bool done = false;

    if (s.contains('\n')) {
        done = false;
    } else {
        done = true;
    }

    QString r;
    int i;
    while (!done) {
        r = s.mid(0, s.indexOf('\n'));          //copy the text up to the newline
        i = r.toInt();
        if (i < 0) {
            i = 0;
        }
        if (i > 900) {
            i = 900;
        }
        durationArray.push_back(i);                          //add onto the list of RPMs
        s = s.mid(s.indexOf('\n') + 1);                 //make s equal to the rest of the string after the \n
//        cout << r.toStdString() << '\n';

        if (s.contains('\n')) {         //update state of doneness
            done = false;
        } else {
            done = true;
        }
    }
    i = s.toInt();
    if (i < 0) {
        i = 0;
    }
    if (i > 900) {
        i = 900;
    }

    durationArray.push_back(i);
}

void MainWindow::on_startButton_clicked()
{
    QString enteredRPMs = ui->rpmTextEdit->document()->toPlainText();
    parseRPMs(enteredRPMs);
    QString enteredDurations = ui->durationTextEdit->document()->toPlainText();
    parseDurations(enteredDurations);

    if (rpmArray.size() != durationArray.size()) {
        printOutput("PLEASE ENSURE THAT THERE ARE AN EQUAL NUMBER OF RPMS AND DURATIONS ENTERED.");
    } else {
        printOutput("RPMs and Durations successfully captured.");
    }

    ui->rpmTextEdit->setReadOnly(true);       //user isn't allowed to edit the instructions after things have been started.
    ui->durationTextEdit->setReadOnly(true);
//    ui->outputTextEdit->clear();
    printOutput("Starting rotation and processing functions.");
}

void MainWindow::on_pauseButton_clicked()
{
                   //user also can't edit them if the system is paused. That'd be nice but too much work.
    ui->outputTextEdit->append("Pausing rotation and processing functions.");
}

void MainWindow::on_stopButton_clicked()
{
    ui->rpmTextEdit->setReadOnly(false);      //If the whole thing is stopped, re-enable the text box.
    ui->durationTextEdit->setReadOnly(false);
    ui->outputTextEdit->clear();
    ui->outputTextEdit->append("Stopping rotation and processing functions.");
}
